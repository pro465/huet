axiom Prop : *

axiom If : \(P: Prop).\(Q: Prop). Prop = \(P: Prop).\(Q: Prop).\(p: P). Q

theorem id: \(P: Prop).(If P P) = \(P: Prop).\(p: P). p

axiom And : \(P: Prop).\(Q: Prop). Prop
      = \(P: Prop).\(Q: Prop).\(R: Prop).(If (If P (If Q R)) R)

theorem and_cons: \(P: Prop).\(p: P).\(Q: Prop).(If Q (And P Q))
     = \(P: Prop).\(p: P).\(Q: Prop).\(q: Q).\(R: Prop).
           \(f: (If P (If Q R))). (f p q)

theorem and_symm: \(P: Prop).\(Q: Prop).(If (And P Q) (And Q P))
     = \(P: Prop).\(Q: Prop).\(and: (And P Q)).
         (and (And Q P) \(p: P).\(q: Q). (and_cons Q q P p))

theorem and_left:  \(P: Prop).\(Q: Prop).(If (And P Q) P)
     = \(P: Prop).\(Q: Prop).\(and: (And P Q)).
         (and P \(p: P).\(q: Q).p)

theorem and_right: \(P: Prop).\(Q: Prop).(If (And P Q) Q)
     = \(P: Prop).\(Q: Prop).\(and: (And P Q)).
         (and Q \(p: P).\(q: Q).q)

axiom Iff : \(P: Prop).\(Q: Prop). Prop
          = \(P: Prop).\(Q: Prop). (And (If P Q) (If Q P))

# axiom iff_replace: \(p: Prop).\(Q: Prop).
#                    (If (Iff P Q) \(F: \(t: Prop). Prop). (If (F P) (F Q)))

theorem iff_cons
    : \(P: Prop).\(Q: Prop).(If (If P Q) (If (If Q P) (Iff P Q)))
    = \(P: Prop).\(Q: Prop).\(pq: (If P Q)).\(qp: (If Q P)).
        (and_cons (If P Q) pq (If Q P) qp)

theorem iff_refl : \(P: Prop). (Iff P P)
                 = \(P: Prop). (iff_cons P P (id P) (id P))

theorem iff_symm : \(P: Prop).\(Q: Prop).(If (Iff P Q) (Iff Q P)) 
                 = \(P: Prop).\(Q: Prop).\(p: (Iff P Q)). 
                     (and_symm (If P Q) (If Q P) p)

theorem iff_left
    : \(P: Prop).\(Q: Prop).(If (Iff P Q) (If P Q))
    = \(P: Prop).\(Q: Prop).(and_left (If P Q) (If Q P))

theorem iff_right
    : \(P: Prop).\(Q: Prop).(If (Iff P Q) (If Q P))
    = \(P: Prop).\(Q: Prop).(and_right (If P Q) (If Q P))

theorem iff_trans 
    : \(P: Prop).\(Q: Prop).\(R: Prop). (If (Iff P Q) (If (Iff Q R) (Iff P R)))
    = \(P: Prop).\(Q: Prop).\(R: Prop).\(h1: (Iff P Q)).\(h2: (Iff Q R)).
        (and_cons
            (If P R)
            \(p: P).(iff_left Q R h2 (iff_left P Q h1 p))
            (If R P)
            \(r: R).(iff_right P Q h1 (iff_right Q R h2 r))
        )

axiom Or : \(P: Prop).\(Q: Prop). Prop
         = \(P: Prop).\(Q: Prop).\(R: Prop).(If (If P R) (If (If Q R) R))

theorem or_left : \(P: Prop).\(Q: Prop).(If P (Or P Q))
                = \(P: Prop).\(Q: Prop).\(p: P).\(R: Prop).
                   \(f: (If P R)).\(g: (If Q R)).(f p)

theorem or_right : \(P: Prop).\(Q: Prop).(If Q (Or P Q))
                 = \(P: Prop).\(Q: Prop).\(q: Q).\(R: Prop).
                   \(f: (If P R)).\(g: (If Q R)).(g q)

theorem or_symm : \(P: Prop).\(Q: Prop).(If (Or P Q) (Or Q P))
                 = \(P: Prop).\(Q: Prop).\(h: (Or P Q)).
                        (h (Or Q P) (or_right Q P) (or_left Q P))


axiom False: Prop = \(P: Prop). P

axiom Not: \(P: Prop). Prop = \(P: Prop). (If P False)

theorem modus_tollens
    : \(P: Prop).\(Q: Prop). (If (If P Q) (If (Not Q) (Not P)))
    = \(P: Prop).\(Q: Prop).
        \(h1: (If P Q)).\(h2: (Not Q)).\(h3: P). (h2 (h1 h3))

theorem add_dneg
    : \(P: Prop).(If P (Not (Not P)))
    = \(P: Prop).\(p: P).\(not_p: (Not P)).(not_p p)

axiom rem_dneg : \(P: Prop).(If (Not (Not P)) P)


theorem dneg: \(P: Prop).(Iff P (Not (Not P)))
            = \(P: Prop).
                (and_cons (If P (Not (Not P))) (add_dneg P)
                          (If (Not (Not P)) P) (rem_dneg P))


theorem and_assoc_1 
    : \(P: Prop).\(Q: Prop).\(R: Prop).   (If (And (And P Q) R) (And P (And Q R)))
    = \(P: Prop).\(Q: Prop).\(R: Prop).\(pqr: (And (And P Q) R)). (pqr
        (And P (And Q R))
        \(pq: (And P Q)).\(r: R).(pq
            (And P (And Q R))
            \(p: P).\(q: Q).
               (and_cons P p (And Q R) (and_cons Q q R r))
        )
    )

theorem and_assoc_2 
    : \(P: Prop).\(Q: Prop).\(R: Prop).   (If (And P (And Q R)) (And (And P Q) R))
    = \(P: Prop).\(Q: Prop).\(R: Prop).\(pqr: (And P (And Q R))). (pqr
        (And (And P Q) R)
        \(p: P).\(qr: (And Q R)).(qr
            (And (And P Q) R)
            \(q: Q).\(r: R).
               (and_cons (And P Q) (and_cons P p Q q) R r)
        )
    )

theorem and_assoc
    : \(P: Prop).\(Q: Prop).\(R: Prop).(Iff (And (And P Q) R) (And P (And Q R)))
    = \(P: Prop).\(Q: Prop).\(R: Prop).
        (and_cons
            (If (And (And P Q) R) (And P (And Q R)))
            (and_assoc_1 P Q R)
            (If (And P (And Q R)) (And (And P Q) R))
            (and_assoc_2 P Q R)
        )

theorem or_assoc_1
    : \(P: Prop).\(Q: Prop).\(R: Prop).   (If (Or (Or P Q) R) (Or P (Or Q R)))
    = \(P: Prop).\(Q: Prop).\(R: Prop).\(pqr: (Or (Or P Q) R)). (pqr
        (Or P (Or Q R))
        \(pq: (Or P Q)).(pq
            (Or P (Or Q R))
            (or_left P (Or Q R))
            \(q: Q).(or_right P (Or Q R) (or_left Q R q))
        )
        \(r: R). (or_right P (Or Q R) (or_right Q R r))
    )

theorem or_assoc_2
    : \(P: Prop).\(Q: Prop).\(R: Prop).   (If (Or P (Or Q R)) (Or (Or P Q) R))
    = \(P: Prop).\(Q: Prop).\(R: Prop).\(pqr: (Or P (Or Q R))). (pqr
        (Or (Or P Q) R)
        \(p: P). (or_left (Or P Q) R (or_left P Q p))
        \(qr: (Or Q R)).(qr
            (Or (Or P Q) R)
            \(q: Q).(or_left (Or P Q) R (or_right P Q q))
            (or_right (Or P Q) R)
        )
    )

theorem or_assoc
    : \(P: Prop).\(Q: Prop).\(R: Prop).(Iff (Or (Or P Q) R) (Or P (Or Q R)))
    = \(P: Prop).\(Q: Prop).\(R: Prop).
        (and_cons
            (If (Or (Or P Q) R) (Or P (Or Q R)))
            (or_assoc_1 P Q R)
            (If (Or P (Or Q R)) (Or (Or P Q) R))
            (or_assoc_2 P Q R)
        )

theorem not_or_implies_not_1
    : \(P: Prop).\(Q: Prop). (If (Not (Or P Q)) (Not P))
    = \(P: Prop).\(Q: Prop).\(h: (Not (Or P Q))).
        \(p: P).(h (or_left P Q p))

theorem not_or_implies_not_2
    : \(P: Prop).\(Q: Prop). (If (Not (Or P Q)) (Not Q))
    = \(P: Prop).\(Q: Prop).\(h: (Not (Or P Q))).
        \(q: Q).(h (or_right P Q q))

theorem not_or_then_and_not
    : \(P: Prop).\(Q: Prop). (If (Not (Or P Q)) (And (Not P) (Not Q)))
    = \(P: Prop).\(Q: Prop).\(h: (Not (Or P Q))).
        (and_cons
            (Not P)
            (not_or_implies_not_1 P Q h) 
            (Not Q)
            (not_or_implies_not_2 P Q h)
        )

theorem and_not_then_not_or
    : \(P: Prop).\(Q: Prop). (If (And (Not P) (Not Q)) (Not (Or P Q)))
    = \(P: Prop).\(Q: Prop).\(h: (And (Not P) (Not Q))).
        (h (Not (Or P Q))
            \(p_not: (Not P)).\(q_not: (Not Q)).
            (rem_dneg (Not (Or P Q)) 
                \(h2: (Not (Not (Or P Q)))).
                    (rem_dneg (Or P Q) h2 False
                        \(p: P). (p_not p)
                        \(q: Q). (q_not q))
            )
        )

theorem not_or_eq_and_not
    : \(P: Prop).\(Q: Prop). (Iff (Not (Or P Q)) (And (Not P) (Not Q)))
    = \(P: Prop).\(Q: Prop). 
        (and_cons
            (If (Not (Or P Q)) (And (Not P) (Not Q)))
            (not_or_then_and_not P Q)
            (If (And (Not P) (Not Q)) (Not (Or P Q)))
            (and_not_then_not_or P Q)
        )

theorem excluded_middle
    : \(P: Prop). (Or P (Not P))
    = \(P: Prop). 
        (rem_dneg (Or P (Not P))
        \(h: (Not (Or P (Not P)))).
            (not_or_then_and_not P (Not P) h False
                \(p: (Not P)).\(p_not: (Not (Not P))). (p_not p)
            )
        )

theorem or_not_then_if
    : \(P: Prop).\(Q: Prop). (If (Or (Not P) Q) (If P Q))
    = \(P: Prop).\(Q: Prop).\(h: (Or (Not P) Q)).\(p: P).(h Q 
        \(not_p: (Not P)). (not_p p Q)
        (id Q)
    )

theorem if_then_or_not
    : \(P: Prop).\(Q: Prop). (If (If P Q) (Or (Not P) Q))
    = \(P: Prop).\(Q: Prop).\(h: (If P Q)). 
        (excluded_middle P (Or (Not P) Q)
            \(p: P). (or_right (Not P) Q (h p))
            (or_left (Not P) Q)
        )

theorem or_not_eq_if
    : \(P: Prop).\(Q: Prop). (Iff (Or (Not P) Q) (If P Q))
    = \(P: Prop).\(Q: Prop).
        (and_cons
            (If (Or (Not P) Q) (If P Q))
            (or_not_then_if P Q)
            (If (If P Q) (Or (Not P) Q))
            (if_then_or_not P Q)
        )

theorem if_eq_or_not
    : \(P: Prop).\(Q: Prop). (Iff (If P Q) (Or (Not P) Q))
    = \(P: Prop).\(Q: Prop). (iff_symm (Or (Not P) Q) (If P Q) (or_not_eq_if P Q))

theorem not_if_implies_and_not
    : \(P: Prop).\(Q: Prop). (If (Not (If P Q)) (And P (Not Q)))
    = \(P: Prop).\(Q: Prop).\(h: (Not (If P Q))).
        (and_cons
            P
            (rem_dneg P \(p_not: (Not P)). (h \(p: P). (p_not p Q)))
            (Not Q)
            \(q: Q).(h \(p: P). q)
        )

theorem pierce
    : \(P: Prop).\(Q: Prop).(If (If (If P Q) P) P)
    = \(P: Prop).\(Q: Prop).\(h: (If (If P Q) P)).
        (if_then_or_not (If P Q) P h P
            \(h2: (Not (If P Q))).
                (and_left P (Not Q) (not_if_implies_and_not P Q h2))
            (id P)
        )
         
                 
axiom Forall : \(T: *).\(P: \(t: T). Prop). Prop
             = \(T: *).\(P: \(t: T). Prop). P

axiom Exists : \(T: *).\(P: \(t: T). Prop). Prop
             = \(T: *).\(P: \(t: T). Prop).
                 \(R: *).\(f: \(t: T).\(p:(P t)). R). R

theorem exists_cons 
    : \(T: *).\(P: \(t: T). Prop).\(t: T).\(p: (P t)). (Exists T P)
    = \(T: *).\(P: \(t: T). Prop).\(t: T).\(p: (P t)).
           \(R: *).\(f: \(t: T).\(p:(P t)). R).(f t p)

theorem nexists_then_foralln
    : \(T: *).\(P: \(t: T). Prop).
        (If (Not (Exists T P)) (Forall T \(t: T).(Not (P t))))
    = \(T: *).\(P: \(t: T). Prop).
        \(h: (Not (Exists T P))).
            \(t: T).\(h2: (P t)).
                (h (exists_cons T P t h2))

theorem foralln_then_nexists
    : \(T: *).\(P: \(t: T). Prop).
        (If (Forall T \(t: T).(Not (P t))) (Not (Exists T P)))
    = \(T: *).\(P: \(t: T). Prop).
        \(h: (Forall T \(t: T).(Not (P t)))).
        \(h2: (Exists T P)).
            (h2 False \(t: T).\(ht: (P t)).(h t ht))

theorem nexists_iff_foralln
    : \(T: *).\(P: \(t: T). Prop).
        (Iff (Not (Exists T P)) (Forall T \(t: T).(Not (P t))))
    = \(T: *).\(P: \(t: T). Prop).
        (iff_cons (Not (Exists T P)) (Forall T \(t: T).(Not (P t)))
            (nexists_then_foralln T P)
            (foralln_then_nexists T P))

axiom Eq : \(T: *).\(P: T).\(Q: T). Prop
         = \(T: *).\(P: T).\(Q: T). \(f: \(X: T). Prop). (Iff (f P) (f Q))

theorem eq_refl 
    : \(T: *).\(P: T). (Eq T P P)
    = \(T: *).\(P: T).\(f: \(P: T). Prop).
        (and_cons
            (If (f P) (f P)) (id (f P))
            (If (f P) (f P)) (id (f P)))

theorem eq_symm
    : \(T: *).\(P: T).\(Q: T). (If (Eq T P Q) (Eq T Q P))
    = \(T: *).\(P: T).\(Q: T).\(h: (Eq T P Q)).
        \(f: \(X: T). Prop).(iff_symm (f P) (f Q) (h f))

theorem eq_trans
    : \(T: *).\(P: T).\(Q: T).\(R: T). (If (Eq T P Q) (If (Eq T Q R) (Eq T P R)))
    = \(T: *).\(P: T).\(Q: T).\(R: T).\(h1: (Eq T P Q)).\(h2: (Eq T Q R)).
        \(f: \(X: T). Prop).(iff_trans (f P) (f Q) (f R) (h1 f) (h2 f))

theorem eq_trans2
    : \(T: *).\(P: T).\(Q: T).\(R: T).\(S: T).
        (If (Eq T P Q) (If (Eq T Q R) (If (Eq T R S) (Eq T P S))))
    = \(T: *).\(P: T).\(Q: T).\(R: T).\(S: T).
        \(h1: (Eq T P Q)).\(h2: (Eq T Q R)).\(h3: (Eq T R S)).
            (eq_trans T P Q S h1 (eq_trans T Q R S h2 h3))

theorem eq_trans3
    : \(T: *).\(O: T).\(P: T).\(Q: T).\(R: T).\(S: T).
        (If (Eq T O P) (If (Eq T P Q) (If (Eq T Q R) (If (Eq T R S) (Eq T O S)))))
    = \(T: *).\(O: T).\(P: T).\(Q: T).\(R: T).\(S: T).
        \(h1: (Eq T O P)).\(h2: (Eq T P Q)).\(h3: (Eq T Q R)).\(h4: (Eq T R S)).
            (eq_trans T O P S h1 (eq_trans2 T P Q R S h2 h3 h4))


theorem eq_replace
    : \(T: *).\(P: T).\(Q: T).\(eq: (Eq T P Q)).\(R: *).\(f: \(X: T). R). (Eq R (f P) (f Q))
    = \(T: *).\(P: T).\(Q: T).\(eq: (Eq T P Q)).\(R: *).\(f: \(X: T). R).
        (iff_left 
            (Eq R (f P) (f P))
            (Eq R (f P) (f Q))
            (eq \(X: T).(Eq R (f P) (f X)))
            (eq_refl R (f P)))

theorem not_iff_symm
    : \(P: Prop).\(Q: Prop). (If (Not (Iff P Q)) (Not (Iff Q P)))
    = \(P: Prop).\(Q: Prop).\(pq: (Not (Iff P Q))).\(qp: (Iff Q P)).
        (pq (iff_symm Q P qp))


theorem not_eq_symm
    : \(T: *).\(P: T).\(Q: T). (If (Not (Eq T P Q)) (Not (Eq T Q P)))
    = \(T: *).\(P: T).\(Q: T).\(pq: (Not (Eq T P Q))).\(qp: (Eq T Q P)).
        (pq (eq_symm T Q P qp))


